name: Superstar CI/CD

on:
  push:
    branches:
      - master  
  pull_request:
    branches:
      - master 

jobs:
  buildProcess:
    name: CI Pipeline 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x 

      - name: Install dependencies
        run: pip install -r requirements.txt  

      - name: Run migrations
        run: python manage.py migrate

      - name: Run tests
        run: python manage.py test

      - name: Run Black
        run: |
          chmod +x ./linters-scripts/black.sh
          ./linters-scripts/black.sh

      - name: Run Flake8
        run: |
          chmod +x ./linters-scripts/flake8.sh
          ./linters-scripts/flake8.sh

      - name: Run Isort
        run: |
          chmod +x ./linters-scripts/isort.sh
          ./linters-scripts/isort.sh

  deployInfrastructure:
    name: CD Pipeline
    runs-on: ubuntu-latest
    needs: buildProcess
    strategy:
      matrix:
        appname: ['superstar']
        deploy-group: ['superstar']
        # put code here
    steps:
      - uses: actions/checkout@v2

      - name: install AWS CLI 2   
        run: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Generate ID
        id: generate-id
        run: |
          echo "::set-output name=id::superstar-${{ github.run_id }}"

      - name: AWS Deploy Infrastructure
        id: deploy-stack
        run: |
          aws cloudformation deploy --template-file .github/cloudformation/superstar-backend.yaml --stack-name superstar --region us-east-1 --parameter-overrides ID=${{ steps.generate-id.outputs.id }}
      
  prepare-ec2-instance:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get the Instance Ip and save in an .sh file 
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Superstar-${{ github.run_id }}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            echo "::set-output name=public_ip::$PUBLIC_IP"

            echo $PUBLIC_IP >> .github/cloudformation/ip-address.sh

      - name: Push into S3
        id: ec2-metadata
        run: |

            aws deploy push \
              --application-name superstar \
              --description "This is my super-star application deployment" \
              --ignore-hidden-files \
              --s3-location s3://superstar-bucket/superstar-bucket.zip \
              --source .

      - name: SSH into EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.ec2-metadata.outputs.public_ip }}
          username: ${{ steps.ec2-metadata.outputs.username }}
          key: ${{ secrets.SUPERSTAR_SSH_KEY }}

          # Customize the following commands according to your setup
          script: |
            aws deploy create-deployment \
              --application-name superstar \
              --deployment-config-name CodeDeployDefault.OneAtATime \
              --deployment-group-name superstar_group \
              --file-exists-behavior OVERWRITE \
              --s3-location bucket=superstar-bucket,key=superstar-bucket.zip,bundleType=zip
